// Vitest Snapshot v1

exports[`Testing the Vue-components > Render Test - AboutView.vue is rendered properly 1`] = `
{
  "baseElement": <body>
    <div>
      <div
        class="about-wrapper"
        data-v-3c7b92b3=""
      >
        <header
          data-v-3c7b92b3=""
        >
          <h1
            data-v-3c7b92b3=""
          >
            # ABOUT
          </h1>
          <div
            class="header__cross-btn"
            data-v-3c7b92b3=""
          />
        </header>
        <article
          data-v-3c7b92b3=""
        >
          

          <b>
            Frontend developer demo
          </b>
          

          <br />
          
Implement a widget that displays the weather.

          <br />
          

          <br />
          

          <span
            style="color: var(--vt-c-fiolet);"
          >
            # Technologies:
          </span>
          

          <br />
          Vue.js - 3, Pinia, Vuelidate, ohmyfetch, 

          <br />
          TypeScript, class, architects skills - DDD, SOLID, TDD, minor dev rules, 

          <br />
          ES7+, 

          <br />
          SCSS, grid, flexbox,

          <br />
          Vitest (unit testing), Cypress (e2e testing).

          <br />
          

          <br />
          

          <span
            style="color: var(--vt-c-fiolet);"
          >
            # Conditions:
          </span>
          

          <br />
          
1. Data for the widget taken from free public API: 

          <br />
          
https://openweathermap.org/current,

          <br />
          via ohmyfetch through 
          <b>
            apiService module
          </b>
          .

          <br />
          

          <br />
          
2. 
          <b>
            API errors
          </b>
           is handlered with a message:

          <br />
          - entering wrong city name while pointing weather location

          <br />
          

          <br />
          
3. After clicking the ‘Gear’ button at the upper-right corner, the view switch to the following:

          <br />
          
Here, a user be able to:

          <br />
          
a. Remove previously added location.

          <br />
          
b. Reorder the location by 
          <b>
            dragging and dropping
          </b>
           them within the list.

          <br />
          
c. Add new locations.
There is a 
          <b>
            validation
          </b>
           with number within certain interval allowing negative numbers.

          <br />
          

          <br />
          
4. Save the configuration in the 
          <b>
            local storage
          </b>
           and restore it on future visits. A user is be able
to configure the widget just once and then have the same view until they change the computer
or clean the storage.

          <br />
          

          <br />
          
5. If the local storage is empty it take current 
          <b>
            geolocation
          </b>
           coordinates.

          <br />
          

          <br />
          
6. Use the 
          <b>
            universal applicable vue component
          </b>
           - '@/components/gridCard/GridCard.vue'.

          <br />
          

          <br />
          
7. Make a bunch of tests where 
          <b>
            unit
          </b>
           and 
          <b>
            e2e
          </b>
           tests cover code with 
          <b>
            Vitest
          </b>
           and 
          <b>
            Cypress.io
          </b>
          

          <br />
          Unit tests include:

          <br />
          - Render component with props, child components, mocking Pinia,

          <br />
          - Click & Router Test - Check the Router.push work out when cross-button click,

          <br />
          - Exported function Testing, test is inside of JS file,

          <br />
          - Pinia Testing - testing actions, setters and getters,

          <br />
          - Testing static methods of class

          <br />
          - as examples it is probably enough.

          <br />
          

          <br />
          E2E tests include:

          <br />
          - routing between pages

          <br />
          - examine a bunch of business processes

          <br />
          

          <br />
          

          <span
            style="color: var(--vt-c-fiolet);"
          >
            # Notes:
          </span>
          

          <br />
          KEEP IN MIND

          <br />
          There is not the production issue. 

          <br />
          First at all it's just demonstration the developer style end some skills.

          <br />
          It is possible to expand and deepen the presented backbone in a multifaceted and elaborate way.

          <br />
          

          <br />
          For example there is no objective to cover code with tests tremendously. I only point to my useful skills about it.

        </article>
        <footer
          data-v-3c7b92b3=""
        >
          <div
            class="controller_open-space"
            data-v-3c7b92b3=""
          >
             BACK to Home 
          </div>
        </footer>
      </div>
    </div>
  </body>,
  "container": <div>
    <div
      class="about-wrapper"
      data-v-3c7b92b3=""
    >
      <header
        data-v-3c7b92b3=""
      >
        <h1
          data-v-3c7b92b3=""
        >
          # ABOUT
        </h1>
        <div
          class="header__cross-btn"
          data-v-3c7b92b3=""
        />
      </header>
      <article
        data-v-3c7b92b3=""
      >
        

        <b>
          Frontend developer demo
        </b>
        

        <br />
        
Implement a widget that displays the weather.

        <br />
        

        <br />
        

        <span
          style="color: var(--vt-c-fiolet);"
        >
          # Technologies:
        </span>
        

        <br />
        Vue.js - 3, Pinia, Vuelidate, ohmyfetch, 

        <br />
        TypeScript, class, architects skills - DDD, SOLID, TDD, minor dev rules, 

        <br />
        ES7+, 

        <br />
        SCSS, grid, flexbox,

        <br />
        Vitest (unit testing), Cypress (e2e testing).

        <br />
        

        <br />
        

        <span
          style="color: var(--vt-c-fiolet);"
        >
          # Conditions:
        </span>
        

        <br />
        
1. Data for the widget taken from free public API: 

        <br />
        
https://openweathermap.org/current,

        <br />
        via ohmyfetch through 
        <b>
          apiService module
        </b>
        .

        <br />
        

        <br />
        
2. 
        <b>
          API errors
        </b>
         is handlered with a message:

        <br />
        - entering wrong city name while pointing weather location

        <br />
        

        <br />
        
3. After clicking the ‘Gear’ button at the upper-right corner, the view switch to the following:

        <br />
        
Here, a user be able to:

        <br />
        
a. Remove previously added location.

        <br />
        
b. Reorder the location by 
        <b>
          dragging and dropping
        </b>
         them within the list.

        <br />
        
c. Add new locations.
There is a 
        <b>
          validation
        </b>
         with number within certain interval allowing negative numbers.

        <br />
        

        <br />
        
4. Save the configuration in the 
        <b>
          local storage
        </b>
         and restore it on future visits. A user is be able
to configure the widget just once and then have the same view until they change the computer
or clean the storage.

        <br />
        

        <br />
        
5. If the local storage is empty it take current 
        <b>
          geolocation
        </b>
         coordinates.

        <br />
        

        <br />
        
6. Use the 
        <b>
          universal applicable vue component
        </b>
         - '@/components/gridCard/GridCard.vue'.

        <br />
        

        <br />
        
7. Make a bunch of tests where 
        <b>
          unit
        </b>
         and 
        <b>
          e2e
        </b>
         tests cover code with 
        <b>
          Vitest
        </b>
         and 
        <b>
          Cypress.io
        </b>
        

        <br />
        Unit tests include:

        <br />
        - Render component with props, child components, mocking Pinia,

        <br />
        - Click & Router Test - Check the Router.push work out when cross-button click,

        <br />
        - Exported function Testing, test is inside of JS file,

        <br />
        - Pinia Testing - testing actions, setters and getters,

        <br />
        - Testing static methods of class

        <br />
        - as examples it is probably enough.

        <br />
        

        <br />
        E2E tests include:

        <br />
        - routing between pages

        <br />
        - examine a bunch of business processes

        <br />
        

        <br />
        

        <span
          style="color: var(--vt-c-fiolet);"
        >
          # Notes:
        </span>
        

        <br />
        KEEP IN MIND

        <br />
        There is not the production issue. 

        <br />
        First at all it's just demonstration the developer style end some skills.

        <br />
        It is possible to expand and deepen the presented backbone in a multifaceted and elaborate way.

        <br />
        

        <br />
        For example there is no objective to cover code with tests tremendously. I only point to my useful skills about it.

      </article>
      <footer
        data-v-3c7b92b3=""
      >
        <div
          class="controller_open-space"
          data-v-3c7b92b3=""
        >
           BACK to Home 
        </div>
      </footer>
    </div>
  </div>,
  "debug": [Function],
  "emitted": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "html": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;
